// --------------------------------------------------------------------
// This class is not autogenerated
// --------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using System.Xml;
using System.Xml.Schema;
using System.Reflection;
using System.IO;

using BindingFile.Extensions;

namespace BindingFile
{
    public partial class BindingInfo
    {
        private string _fileName = null;

        [XmlIgnore()]
        public string FileName
        {
            get
            {
                return _fileName;
            }
        }

        /// <summary>
        /// Method used to initialize objects that were not initialized during xml deserialization
        /// </summary>
        private void Initalize()
        {
            _applicationCollection = new List<BtsApplication>();
            _serviceRefCollection = new List<ServiceRef>();

            foreach (SendPort sendPort in this.SendPortCollection)
            {
                BtsApplication application = this.GetOrCreateApplication(sendPort.ApplicationName);

                // Set reference to parent application
                sendPort.Application = application;

                // Add to collection
                application.SendPortCollection.Add(sendPort);

                // Set reference from TransportInfo to parent send port
                sendPort.PrimaryTransport.SendPort = sendPort;
                sendPort.SecondaryTransport.SendPort = sendPort;
            }

            foreach (ReceivePort receivePort in this.ReceivePortCollection)
            {
                BtsApplication application = this.GetOrCreateApplication(receivePort.ApplicationName);

                if (!application.ReceivePortCollection.Exists(rp => rp.Name == receivePort.Name))
                {
                    // Set reference to parent application
                    receivePort.Application = application;

                    // Add to collection
                    application.ReceivePortCollection.Add(receivePort);
                }

                foreach (ReceiveLocation receiveLocation in receivePort.ReceiveLocations)
                {
                    // Set reference to parent receive port
                    receiveLocation.ReceivePort = receivePort;

                    // Add to collection
                    application.ReceiveLocationCollection.Add(receiveLocation);
                }
            }

            foreach (DistributionList distributionList in this.DistributionListCollection)
            {
                BtsApplication application = this.GetOrCreateApplication(distributionList.ApplicationName);

                if (!application.DistributionListCollection.Exists(rp => rp.Name == distributionList.Name))
                {
                    // Set reference to parent application
                    distributionList.Application = application;

                    // Add to collection
                    application.DistributionListCollection.Add(distributionList);
                }

                foreach (SendPortRef sendPortRef in distributionList.SendPorts)
                {
                    SendPort sendPort = this.SendPortCollection.Find(sp => sp.Name == sendPortRef.Name);

                    if (sendPort != null)
                    {
                        // Set reference from send port group to send port
                        sendPortRef.SendPort = sendPort;

                        // Set reference in send port to parent send port group
                        sendPort.DistributionList = distributionList;
                    }
                }
            }

            // Get application name for all assemblies
            string DEFAULT_APPLICATION_NAME = "[Undefined]";
            string moduleRefApplicationName = DEFAULT_APPLICATION_NAME;
            string applicationNamePrefix = "[Application:";
            string applicationNameSuffix = "]";
            if (this.ModuleRefCollection != null && this.ModuleRefCollection.Count > 0)
            {
                ModuleRef appModuleRef = this.ModuleRefCollection[0];
                if (!string.IsNullOrEmpty(appModuleRef.Name) && appModuleRef.Name.StartsWith(applicationNamePrefix))
                {
                    int applicationNameLength = appModuleRef.Name.Length - applicationNamePrefix.Length - applicationNameSuffix.Length;
                    if (applicationNameLength > 0)
                    {
                        moduleRefApplicationName = appModuleRef.Name.Substring(applicationNamePrefix.Length, applicationNameLength);
                    }
                }
            }

            BtsApplication moduleRefApplication = this.GetOrCreateApplication(moduleRefApplicationName);

            foreach (ModuleRef moduleRef in this.ModuleRefCollection)
            {
                moduleRef.Application = moduleRefApplication;
                moduleRef.IsAssemblyDefinition = (moduleRef.Name != "*" && !moduleRef.Name.StartsWith(applicationNamePrefix));
                moduleRefApplication.ModuleRefCollection.Add(moduleRef);

                foreach (ServiceRef orchestration in moduleRef.Services)
                {
                    orchestration.ModuleRef = moduleRef;
                    orchestration.Application = moduleRefApplication;

                    _serviceRefCollection.Add(orchestration);

                    foreach (ServicePortRef port in orchestration.Ports)
                    {
                        if (port.DistributionListRef != null)
                        {
                            // Set refernce to object
                            DistributionList distributionList = this.DistributionListCollection.Find(dl => dl.Name == port.DistributionListRef.Name);
                            if (distributionList != null)
                            {
                                port.DistributionListRef.DistributionList = distributionList;
                            }
                        }

                        if (port.ReceivePortRef != null)
                        {
                            // Set refernce to object
                            ReceivePort receivePort = this.ReceivePortCollection.Find(rp => rp.Name == port.ReceivePortRef.Name);
                            if (receivePort != null)
                            {
                                port.ReceivePortRef.ReceivePort = receivePort;
                            }

                        }

                        if (port.SendPortRef != null)
                        {
                            // Set refernce to object
                            SendPort sendPort = this.SendPortCollection.Find(sp => sp.Name == port.SendPortRef.Name);
                            if (sendPort != null)
                            {
                                port.SendPortRef.SendPort = sendPort;
                            }
                        }
                    }
                }
            }
        }

        private void InitializeReferencedAssemblies()
        {
            _referencedAssemblies = new ReferencedAssemblyCollection();

            foreach (SendPort sendPort in this.SendPortCollection)
            {
                if (sendPort.ReceivePipeline != null && sendPort.ReceivePipeline.FullyQualifiedName != null)
                {
                    _referencedAssemblies.Add(sendPort.ReceivePipeline, sendPort);
                }

                if (sendPort.TransmitPipeline != null && sendPort.TransmitPipeline.FullyQualifiedName != null)
                {
                    _referencedAssemblies.Add(sendPort.TransmitPipeline, sendPort);
                }

                if (sendPort.Transforms != null)
                {
                    foreach (Transform transform in sendPort.Transforms)
                    {
                        _referencedAssemblies.Add(transform, sendPort);
                    }
                }

                if (sendPort.InboundTransforms != null)
                {
                    foreach (Transform transform in sendPort.InboundTransforms)
                    {
                        _referencedAssemblies.Add(transform, sendPort);
                    }
                }
            }

            foreach (ReceivePort receivePort in this.ReceivePortCollection)
            {
                foreach (ReceiveLocation receiveLocation in this.ReceiveLocationCollection)
                {
                    if (receiveLocation.ReceivePipeline != null && receiveLocation.ReceivePipeline.FullyQualifiedName != null)
                    {
                        _referencedAssemblies.Add(receiveLocation.ReceivePipeline, receiveLocation);
                    }

                    if (receiveLocation.SendPipeline != null && receiveLocation.ReceivePipeline.FullyQualifiedName != null)
                    {
                        _referencedAssemblies.Add(receiveLocation.SendPipeline, receiveLocation);
                    }
                }

                if (receivePort.Transforms != null)
                {
                    foreach (Transform transform in receivePort.Transforms)
                    {
                        _referencedAssemblies.Add(transform, receivePort);
                    }
                }

                if (receivePort.OutboundTransforms != null)
                {
                    foreach (Transform transform in receivePort.OutboundTransforms)
                    {
                        _referencedAssemblies.Add(transform, receivePort);
                    }
                }
            }
        }

        public static BindingInfo LoadFromFileContentAndInitialize(string fileName, string fileContent, ValidationEventHandler validationEventHandler)
        {
            XmlReaderSettings readerSettings = null;

            if (validationEventHandler != null)
            {
                readerSettings = new XmlReaderSettings();
                readerSettings.Schemas.Add(BindingInfo.XmlSchema);
                readerSettings.ValidationType = ValidationType.Schema;
                readerSettings.ValidationEventHandler += validationEventHandler;
            }

            BindingInfo bi = null;
            //using (FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read))
            //{
            XmlReader reader = XmlReader.Create(new StringReader(fileContent), readerSettings);
            BindingInfoXmlReader bindingInfoReader = new BindingInfoXmlReader(reader);
            try
            {
                bi = ((BindingInfo)(Serializer.Deserialize(bindingInfoReader)));
                UpdateElementInfo(bi, bindingInfoReader);
                bi._fileName = fileName;
                bi.Initalize();
                //bi.InitializeReferencedAssemblies();
            }
            catch (InvalidOperationException ex)
            {
                // Swallow exception if it was handled
                // Throw exception if unhandled
                if (validationEventHandler == null)
                {
                    throw;
                }
            }            
            return bi;
        }

        public static BindingInfo LoadFromFileAndInitialize(string fileName)
        {
            return LoadFromFileAndInitialize(fileName, null);
        }

        public static BindingInfo LoadFromFileAndInitialize(string fileName, ValidationEventHandler validationEventHandler)
        {
            XmlReaderSettings readerSettings = null;

            if (validationEventHandler != null)
            {
                readerSettings = new XmlReaderSettings();
                readerSettings.Schemas.Add(BindingInfo.XmlSchema);
                readerSettings.ValidationType = ValidationType.Schema;
                readerSettings.ValidationEventHandler += validationEventHandler;               
            }

            BindingInfo bi;
            using (FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read))
            {
                XmlReader reader = XmlReader.Create(fs, readerSettings);
                BindingInfoXmlReader bindingInfoReader = new BindingInfoXmlReader(reader);                

                XmlSerializer serializer = new XmlSerializer(typeof(BindingInfo));
                serializer.UnknownAttribute += serializer_UnknownAttribute;
                serializer.UnknownElement += serializer_UnknownElement;
                serializer.UnknownNode += serializer_UnknownNode;

                bi = ((BindingInfo)(serializer.Deserialize(bindingInfoReader)));

                UpdateElementInfo(bi, bindingInfoReader);
            }

            bi._fileName = fileName;
            bi.Initalize();
            //bi.InitializeReferencedAssemblies();
            return bi;
        }

        static void serializer_UnknownNode(object sender, XmlNodeEventArgs e)
        {
        }

        static void serializer_UnknownElement(object sender, XmlElementEventArgs e)
        {           
        }

        static void serializer_UnknownAttribute(object sender, XmlAttributeEventArgs e)
        {            
        }

        private static void UpdateElementInfo(BindingInfo bindingInfo, BindingInfoXmlReader bindingInfoReader)
        {
            foreach (var item in bindingInfoReader.ArtifactInfo)
            {
                switch (item.Key.Type)
                {
                    case BindingInfoXmlReader.ArtifactType.SendPort:
                        SendPort sendPort = bindingInfo.GetSendPort(item.Key.Name);
                        if (sendPort != null)
                        {
                            sendPort.ElementInfo = item.Value;
                        }
                        break;

                    case BindingInfoXmlReader.ArtifactType.SendPortGroup:
                        DistributionList sendPortGroup = bindingInfo.GetDistributionList(item.Key.Name);
                        if (sendPortGroup != null)
                        {
                            sendPortGroup.ElementInfo = item.Value;
                        }
                        break;

                    case BindingInfoXmlReader.ArtifactType.ReceivePort:
                        ReceivePort receivePort = bindingInfo.GetReceivePort(item.Key.Name);
                        if (receivePort != null)
                        {
                            receivePort.ElementInfo = item.Value;
                        }
                        break;

                    case BindingInfoXmlReader.ArtifactType.ReceiveLocation:
                        ReceiveLocation receiveLocation = bindingInfo.GetReceiveLocation(item.Key.Name);
                        if (receiveLocation != null)
                        {
                            receiveLocation.ElementInfo = item.Value;
                        }
                        break;

                    case BindingInfoXmlReader.ArtifactType.Orchestrations:
                        //ServiceRef orchestration = bindingInfo.GetServiceRef(item.Key.Name);
                        //if (orchestration != null)
                        //{
                        //    orchestration.ElementInfo = item.Value;
                        //}
                        break;

                    case BindingInfoXmlReader.ArtifactType.Orchestration:
                        ServiceRef orchestration = bindingInfo.GetServiceRef(item.Key.Name);
                        if (orchestration != null)
                        {
                            orchestration.ElementInfo = item.Value;
                        }
                        break;

                    case BindingInfoXmlReader.ArtifactType.ModuleRef:
                        ModuleRef moduleRef = bindingInfo.GetModuleRef(item.Key.Name);
                        if (moduleRef != null)
                        {
                            moduleRef.ElementInfo = item.Value;
                        }
                        break;
                }
            }
        }

        private static XmlSchema _xmlSchema = null;

        public static XmlSchema XmlSchema
        {
            get
            {
                if (_xmlSchema == null)
                {
                    string resourceName = "BindingFile.Generated.BindingInfo.xsd";
                    System.Reflection.Assembly assembly = System.Reflection.Assembly.GetExecutingAssembly();
                    using (Stream schemaStream = assembly.GetManifestResourceStream(resourceName))
                    {
                        _xmlSchema = System.Xml.Schema.XmlSchema.Read(schemaStream, null);
                    }
                }
                return _xmlSchema;
            }
        }


        #region Collections
        private List<BtsApplication> _applicationCollection;
        private List<ServiceRef> _serviceRefCollection;
        private ReferencedAssemblyCollection _referencedAssemblies;

        [XmlIgnore()]
        public List<BtsApplication> ApplicationCollection
        {
            get
            {
                return _applicationCollection;
            }
        }

        [XmlIgnore()]
        public List<ServiceRef> ServiceRefCollection
        {
            get
            {
                return _serviceRefCollection;
            }
        }

        [XmlIgnore()]
        public List<ReceiveLocation> ReceiveLocationCollection
        {
            get
            {
                return (from rp in this.ReceivePortCollection
                        from rl in rp.ReceiveLocations
                        select rl).ToList<ReceiveLocation>();
            }
        }

        [XmlIgnore()]
        public ReferencedAssemblyCollection ReferencedAssemblyCollection
        {
            get
            {
                return _referencedAssemblies;
            }
        }

        public void SortServiceRefCollectionByName()
        {
            this.ServiceRefCollection.Sort((x, y) => x.Name.CompareTo(y.Name));
        }
        #endregion

        #region Get artifacts by application name

        public BtsApplication GetApplication(string applicationName)
        {
            return this.ApplicationCollection.Find(a => a.Name == applicationName);
        }

        public BtsApplication GetOrCreateApplication(string applicationName)
        {
            BtsApplication application = this.GetApplication(applicationName);

            if (application == null)
            {
                application = new BtsApplication(applicationName);
                application.BindingInfo = this;
                this.ApplicationCollection.Add(application);
            }
            return application;
        }

        public List<DistributionList> GetDistributionLists(string applicationName)
        {
            if (applicationName == null)
            {
                return this.DistributionListCollection;
            }
            return this.GetApplication(applicationName).DistributionListCollection;
        }

        public List<SendPort> GetSendPorts(string applicationName)
        {
            if (applicationName == null)
            {
                return this.SendPortCollection;
            }
            return this.GetApplication(applicationName).SendPortCollection;
        }

        public List<ReceivePort> GetReceivePorts(string applicationName)
        {
            if (applicationName == null)
            {
                return this.ReceivePortCollection;
            }
            return this.GetApplication(applicationName).ReceivePortCollection;
        }

        public List<ReceiveLocation> GetReceiveLocations(string applicationName)
        {
            if (applicationName == null)
            {
                return this.ReceiveLocationCollection;
            }
            return this.GetApplication(applicationName).ReceiveLocationCollection;
        }

        public List<ServiceRef> GetServiceRefs(string applicationName)
        {
            if (applicationName == null)
            {
                return this.ServiceRefCollection;
            }
            return this.GetApplication(applicationName).ServiceCollection;
        }
        #endregion
    }

}
