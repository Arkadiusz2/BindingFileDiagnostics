// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>WindowsFormsApplication1</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>True</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace BindingFile
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class BindingInfo : System.ComponentModel.INotifyPropertyChanged
    {

        private string descriptionField;

        private System.DateTime timestampField;

        private List<ModuleRef> moduleRefCollectionField;

        private List<SendPort> sendPortCollectionField;

        private List<DistributionList> distributionListCollectionField;

        private List<ReceivePort> receivePortCollectionField;

        private System.Xml.XmlElement partyCollectionField;

        private System.Xml.XmlNode ediGlobalPropertiesField;

        private string assemblyField;

        private string versionField;

        private BindingState bindingStatusField;

        private int boundEndpointsField;

        private int totalEndpointsField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// BindingInfo class constructor
        /// </summary>
        public BindingInfo()
        {
            this.receivePortCollectionField = new List<ReceivePort>();
            this.distributionListCollectionField = new List<DistributionList>();
            this.sendPortCollectionField = new List<SendPort>();
            this.moduleRefCollectionField = new List<ModuleRef>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                if ((this.descriptionField != null))
                {
                    if ((descriptionField.Equals(value) != true))
                    {
                        this.descriptionField = value;
                        this.OnPropertyChanged("Description");
                    }
                }
                else
                {
                    this.descriptionField = value;
                    this.OnPropertyChanged("Description");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public System.DateTime Timestamp
        {
            get
            {
                return this.timestampField;
            }
            set
            {
                if ((timestampField.Equals(value) != true))
                {
                    this.timestampField = value;
                    this.OnPropertyChanged("Timestamp");
                }
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(IsNullable = true, Order = 2)]
        public List<ModuleRef> ModuleRefCollection
        {
            get
            {
                return this.moduleRefCollectionField;
            }
            set
            {
                if ((this.moduleRefCollectionField != null))
                {
                    if ((moduleRefCollectionField.Equals(value) != true))
                    {
                        this.moduleRefCollectionField = value;
                        this.OnPropertyChanged("ModuleRefCollection");
                    }
                }
                else
                {
                    this.moduleRefCollectionField = value;
                    this.OnPropertyChanged("ModuleRefCollection");
                }
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(IsNullable = true, Order = 3)]
        public List<SendPort> SendPortCollection
        {
            get
            {
                return this.sendPortCollectionField;
            }
            set
            {
                if ((this.sendPortCollectionField != null))
                {
                    if ((sendPortCollectionField.Equals(value) != true))
                    {
                        this.sendPortCollectionField = value;
                        this.OnPropertyChanged("SendPortCollection");
                    }
                }
                else
                {
                    this.sendPortCollectionField = value;
                    this.OnPropertyChanged("SendPortCollection");
                }
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(IsNullable = true, Order = 4)]
        public List<DistributionList> DistributionListCollection
        {
            get
            {
                return this.distributionListCollectionField;
            }
            set
            {
                if ((this.distributionListCollectionField != null))
                {
                    if ((distributionListCollectionField.Equals(value) != true))
                    {
                        this.distributionListCollectionField = value;
                        this.OnPropertyChanged("DistributionListCollection");
                    }
                }
                else
                {
                    this.distributionListCollectionField = value;
                    this.OnPropertyChanged("DistributionListCollection");
                }
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(IsNullable = true, Order = 5)]
        public List<ReceivePort> ReceivePortCollection
        {
            get
            {
                return this.receivePortCollectionField;
            }
            set
            {
                if ((this.receivePortCollectionField != null))
                {
                    if ((receivePortCollectionField.Equals(value) != true))
                    {
                        this.receivePortCollectionField = value;
                        this.OnPropertyChanged("ReceivePortCollection");
                    }
                }
                else
                {
                    this.receivePortCollectionField = value;
                    this.OnPropertyChanged("ReceivePortCollection");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 6)]
        public System.Xml.XmlElement PartyCollection
        {
            get
            {
                return this.partyCollectionField;
            }
            set
            {
                if ((this.partyCollectionField != null))
                {
                    if ((partyCollectionField.Equals(value) != true))
                    {
                        this.partyCollectionField = value;
                        this.OnPropertyChanged("PartyCollection");
                    }
                }
                else
                {
                    this.partyCollectionField = value;
                    this.OnPropertyChanged("PartyCollection");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public System.Xml.XmlNode EdiGlobalProperties
        {
            get
            {
                return this.ediGlobalPropertiesField;
            }
            set
            {
                if ((this.ediGlobalPropertiesField != null))
                {
                    if ((ediGlobalPropertiesField.Equals(value) != true))
                    {
                        this.ediGlobalPropertiesField = value;
                        this.OnPropertyChanged("EdiGlobalProperties");
                    }
                }
                else
                {
                    this.ediGlobalPropertiesField = value;
                    this.OnPropertyChanged("EdiGlobalProperties");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Assembly
        {
            get
            {
                return this.assemblyField;
            }
            set
            {
                if ((this.assemblyField != null))
                {
                    if ((assemblyField.Equals(value) != true))
                    {
                        this.assemblyField = value;
                        this.OnPropertyChanged("Assembly");
                    }
                }
                else
                {
                    this.assemblyField = value;
                    this.OnPropertyChanged("Assembly");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                if ((this.versionField != null))
                {
                    if ((versionField.Equals(value) != true))
                    {
                        this.versionField = value;
                        this.OnPropertyChanged("Version");
                    }
                }
                else
                {
                    this.versionField = value;
                    this.OnPropertyChanged("Version");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public BindingState BindingStatus
        {
            get
            {
                return this.bindingStatusField;
            }
            set
            {
                if ((bindingStatusField.Equals(value) != true))
                {
                    this.bindingStatusField = value;
                    this.OnPropertyChanged("BindingStatus");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int BoundEndpoints
        {
            get
            {
                return this.boundEndpointsField;
            }
            set
            {
                if ((boundEndpointsField.Equals(value) != true))
                {
                    this.boundEndpointsField = value;
                    this.OnPropertyChanged("BoundEndpoints");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int TotalEndpoints
        {
            get
            {
                return this.totalEndpointsField;
            }
            set
            {
                if ((totalEndpointsField.Equals(value) != true))
                {
                    this.totalEndpointsField = value;
                    this.OnPropertyChanged("TotalEndpoints");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BindingInfo));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BindingInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an BindingInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BindingInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BindingInfo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BindingInfo);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out BindingInfo obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static BindingInfo Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((BindingInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current BindingInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an BindingInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BindingInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out BindingInfo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BindingInfo);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out BindingInfo obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static BindingInfo LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ModuleRef : BindingBaseObject, System.ComponentModel.INotifyPropertyChanged
    {

        private List<ServiceRef> servicesField;

        private List<Schema> trackedSchemasField;

        private string nameField;

        private string versionField;

        private string cultureField;

        private string publicKeyTokenField;

        private string fullNameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ModuleRef class constructor
        /// </summary>
        public ModuleRef()
        {
            this.trackedSchemasField = new List<Schema>();
            this.servicesField = new List<ServiceRef>();
        }

        [System.Xml.Serialization.XmlArrayAttribute(IsNullable = true, Order = 0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Service")]
        public List<ServiceRef> Services
        {
            get
            {
                return this.servicesField;
            }
            set
            {
                if ((this.servicesField != null))
                {
                    if ((servicesField.Equals(value) != true))
                    {
                        this.servicesField = value;
                        this.OnPropertyChanged("Services");
                    }
                }
                else
                {
                    this.servicesField = value;
                    this.OnPropertyChanged("Services");
                }
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(IsNullable = true, Order = 1)]
        public List<Schema> TrackedSchemas
        {
            get
            {
                return this.trackedSchemasField;
            }
            set
            {
                if ((this.trackedSchemasField != null))
                {
                    if ((trackedSchemasField.Equals(value) != true))
                    {
                        this.trackedSchemasField = value;
                        this.OnPropertyChanged("TrackedSchemas");
                    }
                }
                else
                {
                    this.trackedSchemasField = value;
                    this.OnPropertyChanged("TrackedSchemas");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                if ((this.versionField != null))
                {
                    if ((versionField.Equals(value) != true))
                    {
                        this.versionField = value;
                        this.OnPropertyChanged("Version");
                    }
                }
                else
                {
                    this.versionField = value;
                    this.OnPropertyChanged("Version");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Culture
        {
            get
            {
                return this.cultureField;
            }
            set
            {
                if ((this.cultureField != null))
                {
                    if ((cultureField.Equals(value) != true))
                    {
                        this.cultureField = value;
                        this.OnPropertyChanged("Culture");
                    }
                }
                else
                {
                    this.cultureField = value;
                    this.OnPropertyChanged("Culture");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PublicKeyToken
        {
            get
            {
                return this.publicKeyTokenField;
            }
            set
            {
                if ((this.publicKeyTokenField != null))
                {
                    if ((publicKeyTokenField.Equals(value) != true))
                    {
                        this.publicKeyTokenField = value;
                        this.OnPropertyChanged("PublicKeyToken");
                    }
                }
                else
                {
                    this.publicKeyTokenField = value;
                    this.OnPropertyChanged("PublicKeyToken");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string FullName
        {
            get
            {
                return this.fullNameField;
            }
            set
            {
                if ((this.fullNameField != null))
                {
                    if ((fullNameField.Equals(value) != true))
                    {
                        this.fullNameField = value;
                        this.OnPropertyChanged("FullName");
                    }
                }
                else
                {
                    this.fullNameField = value;
                    this.OnPropertyChanged("FullName");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ModuleRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ModuleRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ModuleRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ModuleRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ModuleRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ModuleRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ModuleRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ModuleRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ModuleRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ModuleRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ModuleRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ModuleRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ModuleRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ModuleRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ModuleRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ModuleRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ServiceRef : BindingBaseObject, System.ComponentModel.INotifyPropertyChanged
    {

        private List<ServicePortRef> portsField;

        private List<RoleRef> rolesField;

        private HostRef hostField;

        private string nameField;

        private ServiceRefState stateField;

        private OrchestrationTrackingTypes trackingOptionField;

        private string descriptionField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ServiceRef class constructor
        /// </summary>
        public ServiceRef()
        {
            this.hostField = new HostRef();
            this.rolesField = new List<RoleRef>();
            this.portsField = new List<ServicePortRef>();
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Port")]
        public List<ServicePortRef> Ports
        {
            get
            {
                return this.portsField;
            }
            set
            {
                if ((this.portsField != null))
                {
                    if ((portsField.Equals(value) != true))
                    {
                        this.portsField = value;
                        this.OnPropertyChanged("Ports");
                    }
                }
                else
                {
                    this.portsField = value;
                    this.OnPropertyChanged("Ports");
                }
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(IsNullable = true, Order = 1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Role")]
        public List<RoleRef> Roles
        {
            get
            {
                return this.rolesField;
            }
            set
            {
                if ((this.rolesField != null))
                {
                    if ((rolesField.Equals(value) != true))
                    {
                        this.rolesField = value;
                        this.OnPropertyChanged("Roles");
                    }
                }
                else
                {
                    this.rolesField = value;
                    this.OnPropertyChanged("Roles");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 2)]
        public HostRef Host
        {
            get
            {
                return this.hostField;
            }
            set
            {
                if ((this.hostField != null))
                {
                    if ((hostField.Equals(value) != true))
                    {
                        this.hostField = value;
                        this.OnPropertyChanged("Host");
                    }
                }
                else
                {
                    this.hostField = value;
                    this.OnPropertyChanged("Host");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ServiceRefState State
        {
            get
            {
                return this.stateField;
            }
            set
            {
                if ((stateField.Equals(value) != true))
                {
                    this.stateField = value;
                    this.OnPropertyChanged("State");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public OrchestrationTrackingTypes TrackingOption
        {
            get
            {
                return this.trackingOptionField;
            }
            set
            {
                if ((trackingOptionField.Equals(value) != true))
                {
                    this.trackingOptionField = value;
                    this.OnPropertyChanged("TrackingOption");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                if ((this.descriptionField != null))
                {
                    if ((descriptionField.Equals(value) != true))
                    {
                        this.descriptionField = value;
                        this.OnPropertyChanged("Description");
                    }
                }
                else
                {
                    this.descriptionField = value;
                    this.OnPropertyChanged("Description");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServiceRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServiceRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ServiceRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServiceRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServiceRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ServiceRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ServiceRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ServiceRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ServiceRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ServiceRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ServiceRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServiceRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ServiceRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ServiceRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ServiceRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ServiceRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ServicePortRef : BindingBaseObject, System.ComponentModel.INotifyPropertyChanged
    {

        private SendPortRef sendPortRefField;

        private DistributionListRef distributionListRefField;

        private ReceivePortRef receivePortRefField;

        private string nameField;

        private int modifierField;

        private int bindingOptionField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ServicePortRef class constructor
        /// </summary>
        public ServicePortRef()
        {
            this.receivePortRefField = new ReceivePortRef();
            this.distributionListRefField = new DistributionListRef();
            this.sendPortRefField = new SendPortRef();
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 0)]
        public SendPortRef SendPortRef
        {
            get
            {
                return this.sendPortRefField;
            }
            set
            {
                if ((this.sendPortRefField != null))
                {
                    if ((sendPortRefField.Equals(value) != true))
                    {
                        this.sendPortRefField = value;
                        this.OnPropertyChanged("SendPortRef");
                    }
                }
                else
                {
                    this.sendPortRefField = value;
                    this.OnPropertyChanged("SendPortRef");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 1)]
        public DistributionListRef DistributionListRef
        {
            get
            {
                return this.distributionListRefField;
            }
            set
            {
                if ((this.distributionListRefField != null))
                {
                    if ((distributionListRefField.Equals(value) != true))
                    {
                        this.distributionListRefField = value;
                        this.OnPropertyChanged("DistributionListRef");
                    }
                }
                else
                {
                    this.distributionListRefField = value;
                    this.OnPropertyChanged("DistributionListRef");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 2)]
        public ReceivePortRef ReceivePortRef
        {
            get
            {
                return this.receivePortRefField;
            }
            set
            {
                if ((this.receivePortRefField != null))
                {
                    if ((receivePortRefField.Equals(value) != true))
                    {
                        this.receivePortRefField = value;
                        this.OnPropertyChanged("ReceivePortRef");
                    }
                }
                else
                {
                    this.receivePortRefField = value;
                    this.OnPropertyChanged("ReceivePortRef");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Modifier
        {
            get
            {
                return this.modifierField;
            }
            set
            {
                if ((modifierField.Equals(value) != true))
                {
                    this.modifierField = value;
                    this.OnPropertyChanged("Modifier");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int BindingOption
        {
            get
            {
                return this.bindingOptionField;
            }
            set
            {
                if ((bindingOptionField.Equals(value) != true))
                {
                    this.bindingOptionField = value;
                    this.OnPropertyChanged("BindingOption");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServicePortRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServicePortRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ServicePortRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServicePortRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServicePortRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ServicePortRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ServicePortRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ServicePortRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ServicePortRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ServicePortRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ServicePortRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServicePortRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ServicePortRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ServicePortRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ServicePortRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ServicePortRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class SendPortRef : System.ComponentModel.INotifyPropertyChanged
    {

        private string nameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SendPortRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SendPortRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SendPortRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SendPortRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SendPortRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SendPortRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out SendPortRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static SendPortRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((SendPortRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current SendPortRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SendPortRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SendPortRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SendPortRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SendPortRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SendPortRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SendPortRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class SendHandlerRef : System.ComponentModel.INotifyPropertyChanged
    {

        private ProtocolType transportTypeField;

        private string nameField;

        private bool hostTrustedField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// SendHandlerRef class constructor
        /// </summary>
        public SendHandlerRef()
        {
            this.transportTypeField = new ProtocolType();
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 0)]
        public ProtocolType TransportType
        {
            get
            {
                return this.transportTypeField;
            }
            set
            {
                if ((this.transportTypeField != null))
                {
                    if ((transportTypeField.Equals(value) != true))
                    {
                        this.transportTypeField = value;
                        this.OnPropertyChanged("TransportType");
                    }
                }
                else
                {
                    this.transportTypeField = value;
                    this.OnPropertyChanged("TransportType");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool HostTrusted
        {
            get
            {
                return this.hostTrustedField;
            }
            set
            {
                if ((hostTrustedField.Equals(value) != true))
                {
                    this.hostTrustedField = value;
                    this.OnPropertyChanged("HostTrusted");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SendHandlerRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SendHandlerRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SendHandlerRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SendHandlerRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SendHandlerRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SendHandlerRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out SendHandlerRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static SendHandlerRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((SendHandlerRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current SendHandlerRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SendHandlerRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SendHandlerRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SendHandlerRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SendHandlerRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SendHandlerRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SendHandlerRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ProtocolType : System.ComponentModel.INotifyPropertyChanged
    {

        private string nameField;

        private int capabilitiesField;

        private string configurationClsidField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Capabilities
        {
            get
            {
                return this.capabilitiesField;
            }
            set
            {
                if ((capabilitiesField.Equals(value) != true))
                {
                    this.capabilitiesField = value;
                    this.OnPropertyChanged("Capabilities");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ConfigurationClsid
        {
            get
            {
                return this.configurationClsidField;
            }
            set
            {
                if ((this.configurationClsidField != null))
                {
                    if ((configurationClsidField.Equals(value) != true))
                    {
                        this.configurationClsidField = value;
                        this.OnPropertyChanged("ConfigurationClsid");
                    }
                }
                else
                {
                    this.configurationClsidField = value;
                    this.OnPropertyChanged("ConfigurationClsid");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ProtocolType));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProtocolType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ProtocolType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProtocolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ProtocolType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProtocolType);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ProtocolType obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ProtocolType Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ProtocolType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ProtocolType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ProtocolType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProtocolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ProtocolType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProtocolType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ProtocolType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ProtocolType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class Transform : System.ComponentModel.INotifyPropertyChanged
    {

        private string fullNameField;

        private string assemblyQualifiedNameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string FullName
        {
            get
            {
                return this.fullNameField;
            }
            set
            {
                if ((this.fullNameField != null))
                {
                    if ((fullNameField.Equals(value) != true))
                    {
                        this.fullNameField = value;
                        this.OnPropertyChanged("FullName");
                    }
                }
                else
                {
                    this.fullNameField = value;
                    this.OnPropertyChanged("FullName");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AssemblyQualifiedName
        {
            get
            {
                return this.assemblyQualifiedNameField;
            }
            set
            {
                if ((this.assemblyQualifiedNameField != null))
                {
                    if ((assemblyQualifiedNameField.Equals(value) != true))
                    {
                        this.assemblyQualifiedNameField = value;
                        this.OnPropertyChanged("AssemblyQualifiedName");
                    }
                }
                else
                {
                    this.assemblyQualifiedNameField = value;
                    this.OnPropertyChanged("AssemblyQualifiedName");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Transform));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Transform object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Transform object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Transform object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Transform obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Transform);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Transform obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Transform Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Transform)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Transform object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Transform object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Transform object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Transform obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Transform);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Transform obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Transform LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ReceiveHandlerRef : System.ComponentModel.INotifyPropertyChanged
    {

        private ProtocolType transportTypeField;

        private string nameField;

        private bool hostTrustedField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ReceiveHandlerRef class constructor
        /// </summary>
        public ReceiveHandlerRef()
        {
            this.transportTypeField = new ProtocolType();
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 0)]
        public ProtocolType TransportType
        {
            get
            {
                return this.transportTypeField;
            }
            set
            {
                if ((this.transportTypeField != null))
                {
                    if ((transportTypeField.Equals(value) != true))
                    {
                        this.transportTypeField = value;
                        this.OnPropertyChanged("TransportType");
                    }
                }
                else
                {
                    this.transportTypeField = value;
                    this.OnPropertyChanged("TransportType");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool HostTrusted
        {
            get
            {
                return this.hostTrustedField;
            }
            set
            {
                if ((hostTrustedField.Equals(value) != true))
                {
                    this.hostTrustedField = value;
                    this.OnPropertyChanged("HostTrusted");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ReceiveHandlerRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ReceiveHandlerRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ReceiveHandlerRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ReceiveHandlerRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ReceiveHandlerRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReceiveHandlerRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ReceiveHandlerRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ReceiveHandlerRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ReceiveHandlerRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ReceiveHandlerRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ReceiveHandlerRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ReceiveHandlerRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ReceiveHandlerRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReceiveHandlerRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ReceiveHandlerRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ReceiveHandlerRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class CertificateInfo : System.ComponentModel.INotifyPropertyChanged
    {

        private string longNameField;

        private string shortNameField;

        private CertUsageType usageTypeField;

        private string thumbPrintField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string LongName
        {
            get
            {
                return this.longNameField;
            }
            set
            {
                if ((this.longNameField != null))
                {
                    if ((longNameField.Equals(value) != true))
                    {
                        this.longNameField = value;
                        this.OnPropertyChanged("LongName");
                    }
                }
                else
                {
                    this.longNameField = value;
                    this.OnPropertyChanged("LongName");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ShortName
        {
            get
            {
                return this.shortNameField;
            }
            set
            {
                if ((this.shortNameField != null))
                {
                    if ((shortNameField.Equals(value) != true))
                    {
                        this.shortNameField = value;
                        this.OnPropertyChanged("ShortName");
                    }
                }
                else
                {
                    this.shortNameField = value;
                    this.OnPropertyChanged("ShortName");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public CertUsageType UsageType
        {
            get
            {
                return this.usageTypeField;
            }
            set
            {
                if ((usageTypeField.Equals(value) != true))
                {
                    this.usageTypeField = value;
                    this.OnPropertyChanged("UsageType");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ThumbPrint
        {
            get
            {
                return this.thumbPrintField;
            }
            set
            {
                if ((this.thumbPrintField != null))
                {
                    if ((thumbPrintField.Equals(value) != true))
                    {
                        this.thumbPrintField = value;
                        this.OnPropertyChanged("ThumbPrint");
                    }
                }
                else
                {
                    this.thumbPrintField = value;
                    this.OnPropertyChanged("ThumbPrint");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CertificateInfo));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CertificateInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an CertificateInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CertificateInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CertificateInfo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CertificateInfo);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out CertificateInfo obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static CertificateInfo Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((CertificateInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current CertificateInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CertificateInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CertificateInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CertificateInfo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CertificateInfo);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CertificateInfo obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CertificateInfo LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    public enum CertUsageType
    {

        /// <remarks/>
        None = 1,

        /// <remarks/>
        Encryption = 2,

        /// <remarks/>
        Signature = 4,

        /// <remarks/>
        Both = 8,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class PipelineRef : System.ComponentModel.INotifyPropertyChanged
    {

        private string nameField;

        private string fullyQualifiedNameField;

        private int typeField;

        private PipelineTrackingTypes trackingOptionField;

        private string descriptionField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string FullyQualifiedName
        {
            get
            {
                return this.fullyQualifiedNameField;
            }
            set
            {
                if ((this.fullyQualifiedNameField != null))
                {
                    if ((fullyQualifiedNameField.Equals(value) != true))
                    {
                        this.fullyQualifiedNameField = value;
                        this.OnPropertyChanged("FullyQualifiedName");
                    }
                }
                else
                {
                    this.fullyQualifiedNameField = value;
                    this.OnPropertyChanged("FullyQualifiedName");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                if ((typeField.Equals(value) != true))
                {
                    this.typeField = value;
                    this.OnPropertyChanged("Type");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public PipelineTrackingTypes TrackingOption
        {
            get
            {
                return this.trackingOptionField;
            }
            set
            {
                if ((trackingOptionField.Equals(value) != true))
                {
                    this.trackingOptionField = value;
                    this.OnPropertyChanged("TrackingOption");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                if ((this.descriptionField != null))
                {
                    if ((descriptionField.Equals(value) != true))
                    {
                        this.descriptionField = value;
                        this.OnPropertyChanged("Description");
                    }
                }
                else
                {
                    this.descriptionField = value;
                    this.OnPropertyChanged("Description");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PipelineRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PipelineRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PipelineRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PipelineRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PipelineRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PipelineRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out PipelineRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static PipelineRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((PipelineRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current PipelineRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PipelineRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PipelineRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PipelineRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PipelineRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PipelineRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PipelineRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    public enum PipelineTrackingTypes
    {

        /// <remarks/>
        None = 1,

        /// <remarks/>
        ServiceStartEnd = 2,

        /// <remarks/>
        MessageSendReceive = 4,

        /// <remarks/>
        InboundMessageBody = 8,

        /// <remarks/>
        OutboundMessageBody = 16,

        /// <remarks/>
        PipelineEvents = 32,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class Schema : System.ComponentModel.INotifyPropertyChanged
    {

        private List<string> trackedPropertyNamesField;

        private string fullNameField;

        private string rootNameField;

        private string assemblyQualifiedNameField;

        private bool alwaysTrackAllPropertiesField;

        private string descriptionField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Schema class constructor
        /// </summary>
        public Schema()
        {
            this.trackedPropertyNamesField = new List<string>();
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 0)]
        public List<string> TrackedPropertyNames
        {
            get
            {
                return this.trackedPropertyNamesField;
            }
            set
            {
                if ((this.trackedPropertyNamesField != null))
                {
                    if ((trackedPropertyNamesField.Equals(value) != true))
                    {
                        this.trackedPropertyNamesField = value;
                        this.OnPropertyChanged("TrackedPropertyNames");
                    }
                }
                else
                {
                    this.trackedPropertyNamesField = value;
                    this.OnPropertyChanged("TrackedPropertyNames");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string FullName
        {
            get
            {
                return this.fullNameField;
            }
            set
            {
                if ((this.fullNameField != null))
                {
                    if ((fullNameField.Equals(value) != true))
                    {
                        this.fullNameField = value;
                        this.OnPropertyChanged("FullName");
                    }
                }
                else
                {
                    this.fullNameField = value;
                    this.OnPropertyChanged("FullName");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string RootName
        {
            get
            {
                return this.rootNameField;
            }
            set
            {
                if ((this.rootNameField != null))
                {
                    if ((rootNameField.Equals(value) != true))
                    {
                        this.rootNameField = value;
                        this.OnPropertyChanged("RootName");
                    }
                }
                else
                {
                    this.rootNameField = value;
                    this.OnPropertyChanged("RootName");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AssemblyQualifiedName
        {
            get
            {
                return this.assemblyQualifiedNameField;
            }
            set
            {
                if ((this.assemblyQualifiedNameField != null))
                {
                    if ((assemblyQualifiedNameField.Equals(value) != true))
                    {
                        this.assemblyQualifiedNameField = value;
                        this.OnPropertyChanged("AssemblyQualifiedName");
                    }
                }
                else
                {
                    this.assemblyQualifiedNameField = value;
                    this.OnPropertyChanged("AssemblyQualifiedName");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool AlwaysTrackAllProperties
        {
            get
            {
                return this.alwaysTrackAllPropertiesField;
            }
            set
            {
                if ((alwaysTrackAllPropertiesField.Equals(value) != true))
                {
                    this.alwaysTrackAllPropertiesField = value;
                    this.OnPropertyChanged("AlwaysTrackAllProperties");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                if ((this.descriptionField != null))
                {
                    if ((descriptionField.Equals(value) != true))
                    {
                        this.descriptionField = value;
                        this.OnPropertyChanged("Description");
                    }
                }
                else
                {
                    this.descriptionField = value;
                    this.OnPropertyChanged("Description");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Schema));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Schema object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Schema object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Schema object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Schema obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Schema);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Schema obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Schema Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Schema)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Schema object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Schema object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Schema object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Schema obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Schema);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Schema obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Schema LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class HostRef : System.ComponentModel.INotifyPropertyChanged
    {

        private string nameField;

        private string nTGroupNameField;

        private int typeField;

        private bool trustedField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string NTGroupName
        {
            get
            {
                return this.nTGroupNameField;
            }
            set
            {
                if ((this.nTGroupNameField != null))
                {
                    if ((nTGroupNameField.Equals(value) != true))
                    {
                        this.nTGroupNameField = value;
                        this.OnPropertyChanged("NTGroupName");
                    }
                }
                else
                {
                    this.nTGroupNameField = value;
                    this.OnPropertyChanged("NTGroupName");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                if ((typeField.Equals(value) != true))
                {
                    this.typeField = value;
                    this.OnPropertyChanged("Type");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Trusted
        {
            get
            {
                return this.trustedField;
            }
            set
            {
                if ((trustedField.Equals(value) != true))
                {
                    this.trustedField = value;
                    this.OnPropertyChanged("Trusted");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(HostRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HostRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HostRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output HostRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out HostRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HostRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out HostRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static HostRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((HostRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current HostRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HostRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HostRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HostRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HostRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HostRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HostRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class EnlistedPartyMapping : System.ComponentModel.INotifyPropertyChanged
    {

        private SendPortRef sendPortRefField;

        private string portTypeNameField;

        private string operationNameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// EnlistedPartyMapping class constructor
        /// </summary>
        public EnlistedPartyMapping()
        {
            this.sendPortRefField = new SendPortRef();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public SendPortRef SendPortRef
        {
            get
            {
                return this.sendPortRefField;
            }
            set
            {
                if ((this.sendPortRefField != null))
                {
                    if ((sendPortRefField.Equals(value) != true))
                    {
                        this.sendPortRefField = value;
                        this.OnPropertyChanged("SendPortRef");
                    }
                }
                else
                {
                    this.sendPortRefField = value;
                    this.OnPropertyChanged("SendPortRef");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PortTypeName
        {
            get
            {
                return this.portTypeNameField;
            }
            set
            {
                if ((this.portTypeNameField != null))
                {
                    if ((portTypeNameField.Equals(value) != true))
                    {
                        this.portTypeNameField = value;
                        this.OnPropertyChanged("PortTypeName");
                    }
                }
                else
                {
                    this.portTypeNameField = value;
                    this.OnPropertyChanged("PortTypeName");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OperationName
        {
            get
            {
                return this.operationNameField;
            }
            set
            {
                if ((this.operationNameField != null))
                {
                    if ((operationNameField.Equals(value) != true))
                    {
                        this.operationNameField = value;
                        this.OnPropertyChanged("OperationName");
                    }
                }
                else
                {
                    this.operationNameField = value;
                    this.OnPropertyChanged("OperationName");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(EnlistedPartyMapping));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EnlistedPartyMapping object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EnlistedPartyMapping object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output EnlistedPartyMapping object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out EnlistedPartyMapping obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EnlistedPartyMapping);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out EnlistedPartyMapping obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static EnlistedPartyMapping Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((EnlistedPartyMapping)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current EnlistedPartyMapping object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EnlistedPartyMapping object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EnlistedPartyMapping object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EnlistedPartyMapping obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EnlistedPartyMapping);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EnlistedPartyMapping obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EnlistedPartyMapping LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ReceivePortRef : System.ComponentModel.INotifyPropertyChanged
    {

        private string nameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ReceivePortRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ReceivePortRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ReceivePortRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ReceivePortRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ReceivePortRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReceivePortRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ReceivePortRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ReceivePortRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ReceivePortRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ReceivePortRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ReceivePortRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ReceivePortRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ReceivePortRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReceivePortRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ReceivePortRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ReceivePortRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class DistributionListRef : System.ComponentModel.INotifyPropertyChanged
    {

        private string nameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DistributionListRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DistributionListRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DistributionListRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DistributionListRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DistributionListRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DistributionListRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DistributionListRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DistributionListRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DistributionListRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current DistributionListRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DistributionListRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DistributionListRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DistributionListRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DistributionListRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DistributionListRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DistributionListRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SendPort))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransportInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DistributionList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReceivePort))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReceiveLocation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EnlistedParty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RoleRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServicePortRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ModuleRef))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public abstract partial class BindingBaseObject : System.ComponentModel.INotifyPropertyChanged
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BindingBaseObject));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BindingBaseObject object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an BindingBaseObject object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BindingBaseObject object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BindingBaseObject obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BindingBaseObject);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out BindingBaseObject obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static BindingBaseObject Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((BindingBaseObject)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current BindingBaseObject object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an BindingBaseObject object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BindingBaseObject object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out BindingBaseObject obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BindingBaseObject);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out BindingBaseObject obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static BindingBaseObject LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class SendPort : BindingBaseObject, System.ComponentModel.INotifyPropertyChanged
    {

        private string descriptionField;

        private PipelineRef transmitPipelineField;

        private string sendPipelineDataField;

        private TransportInfo primaryTransportField;

        private TransportInfo secondaryTransportField;

        private CertificateInfo encryptionCertField;

        private PipelineRef receivePipelineField;

        private string receivePipelineDataField;

        private int trackingField;

        private string filterField;

        private List<Transform> transformsField;

        private List<Transform> inboundTransformsField;

        private bool orderedDeliveryField;

        private int priorityField;

        private bool stopSendingOnFailureField;

        private bool routeFailedMessageField;

        private string applicationNameField;

        private string nameField;

        private bool isStaticField;

        private bool isTwoWayField;

        private int bindingOptionField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// SendPort class constructor
        /// </summary>
        public SendPort()
        {
            this.inboundTransformsField = new List<Transform>();
            this.transformsField = new List<Transform>();
            this.receivePipelineField = new PipelineRef();
            this.encryptionCertField = new CertificateInfo();
            this.secondaryTransportField = new TransportInfo();
            this.primaryTransportField = new TransportInfo();
            this.transmitPipelineField = new PipelineRef();
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 0)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                if ((this.descriptionField != null))
                {
                    if ((descriptionField.Equals(value) != true))
                    {
                        this.descriptionField = value;
                        this.OnPropertyChanged("Description");
                    }
                }
                else
                {
                    this.descriptionField = value;
                    this.OnPropertyChanged("Description");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public PipelineRef TransmitPipeline
        {
            get
            {
                return this.transmitPipelineField;
            }
            set
            {
                if ((this.transmitPipelineField != null))
                {
                    if ((transmitPipelineField.Equals(value) != true))
                    {
                        this.transmitPipelineField = value;
                        this.OnPropertyChanged("TransmitPipeline");
                    }
                }
                else
                {
                    this.transmitPipelineField = value;
                    this.OnPropertyChanged("TransmitPipeline");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string SendPipelineData
        {
            get
            {
                return this.sendPipelineDataField;
            }
            set
            {
                if ((this.sendPipelineDataField != null))
                {
                    if ((sendPipelineDataField.Equals(value) != true))
                    {
                        this.sendPipelineDataField = value;
                        this.OnPropertyChanged("SendPipelineData");
                    }
                }
                else
                {
                    this.sendPipelineDataField = value;
                    this.OnPropertyChanged("SendPipelineData");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public TransportInfo PrimaryTransport
        {
            get
            {
                return this.primaryTransportField;
            }
            set
            {
                if ((this.primaryTransportField != null))
                {
                    if ((primaryTransportField.Equals(value) != true))
                    {
                        this.primaryTransportField = value;
                        this.OnPropertyChanged("PrimaryTransport");
                    }
                }
                else
                {
                    this.primaryTransportField = value;
                    this.OnPropertyChanged("PrimaryTransport");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public TransportInfo SecondaryTransport
        {
            get
            {
                return this.secondaryTransportField;
            }
            set
            {
                if ((this.secondaryTransportField != null))
                {
                    if ((secondaryTransportField.Equals(value) != true))
                    {
                        this.secondaryTransportField = value;
                        this.OnPropertyChanged("SecondaryTransport");
                    }
                }
                else
                {
                    this.secondaryTransportField = value;
                    this.OnPropertyChanged("SecondaryTransport");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public CertificateInfo EncryptionCert
        {
            get
            {
                return this.encryptionCertField;
            }
            set
            {
                if ((this.encryptionCertField != null))
                {
                    if ((encryptionCertField.Equals(value) != true))
                    {
                        this.encryptionCertField = value;
                        this.OnPropertyChanged("EncryptionCert");
                    }
                }
                else
                {
                    this.encryptionCertField = value;
                    this.OnPropertyChanged("EncryptionCert");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public PipelineRef ReceivePipeline
        {
            get
            {
                return this.receivePipelineField;
            }
            set
            {
                if ((this.receivePipelineField != null))
                {
                    if ((receivePipelineField.Equals(value) != true))
                    {
                        this.receivePipelineField = value;
                        this.OnPropertyChanged("ReceivePipeline");
                    }
                }
                else
                {
                    this.receivePipelineField = value;
                    this.OnPropertyChanged("ReceivePipeline");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 7)]
        public string ReceivePipelineData
        {
            get
            {
                return this.receivePipelineDataField;
            }
            set
            {
                if ((this.receivePipelineDataField != null))
                {
                    if ((receivePipelineDataField.Equals(value) != true))
                    {
                        this.receivePipelineDataField = value;
                        this.OnPropertyChanged("ReceivePipelineData");
                    }
                }
                else
                {
                    this.receivePipelineDataField = value;
                    this.OnPropertyChanged("ReceivePipelineData");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public int Tracking
        {
            get
            {
                return this.trackingField;
            }
            set
            {
                if ((trackingField.Equals(value) != true))
                {
                    this.trackingField = value;
                    this.OnPropertyChanged("Tracking");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 9)]
        public string Filter
        {
            get
            {
                return this.filterField;
            }
            set
            {
                if ((this.filterField != null))
                {
                    if ((filterField.Equals(value) != true))
                    {
                        this.filterField = value;
                        this.OnPropertyChanged("Filter");
                    }
                }
                else
                {
                    this.filterField = value;
                    this.OnPropertyChanged("Filter");
                }
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 10)]
        public List<Transform> Transforms
        {
            get
            {
                return this.transformsField;
            }
            set
            {
                if ((this.transformsField != null))
                {
                    if ((transformsField.Equals(value) != true))
                    {
                        this.transformsField = value;
                        this.OnPropertyChanged("Transforms");
                    }
                }
                else
                {
                    this.transformsField = value;
                    this.OnPropertyChanged("Transforms");
                }
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 11)]
        public List<Transform> InboundTransforms
        {
            get
            {
                return this.inboundTransformsField;
            }
            set
            {
                if ((this.inboundTransformsField != null))
                {
                    if ((inboundTransformsField.Equals(value) != true))
                    {
                        this.inboundTransformsField = value;
                        this.OnPropertyChanged("InboundTransforms");
                    }
                }
                else
                {
                    this.inboundTransformsField = value;
                    this.OnPropertyChanged("InboundTransforms");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        public bool OrderedDelivery
        {
            get
            {
                return this.orderedDeliveryField;
            }
            set
            {
                if ((orderedDeliveryField.Equals(value) != true))
                {
                    this.orderedDeliveryField = value;
                    this.OnPropertyChanged("OrderedDelivery");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        public int Priority
        {
            get
            {
                return this.priorityField;
            }
            set
            {
                if ((priorityField.Equals(value) != true))
                {
                    this.priorityField = value;
                    this.OnPropertyChanged("Priority");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        public bool StopSendingOnFailure
        {
            get
            {
                return this.stopSendingOnFailureField;
            }
            set
            {
                if ((stopSendingOnFailureField.Equals(value) != true))
                {
                    this.stopSendingOnFailureField = value;
                    this.OnPropertyChanged("StopSendingOnFailure");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 15)]
        public bool RouteFailedMessage
        {
            get
            {
                return this.routeFailedMessageField;
            }
            set
            {
                if ((routeFailedMessageField.Equals(value) != true))
                {
                    this.routeFailedMessageField = value;
                    this.OnPropertyChanged("RouteFailedMessage");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 16)]
        public string ApplicationName
        {
            get
            {
                return this.applicationNameField;
            }
            set
            {
                if ((this.applicationNameField != null))
                {
                    if ((applicationNameField.Equals(value) != true))
                    {
                        this.applicationNameField = value;
                        this.OnPropertyChanged("ApplicationName");
                    }
                }
                else
                {
                    this.applicationNameField = value;
                    this.OnPropertyChanged("ApplicationName");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsStatic
        {
            get
            {
                return this.isStaticField;
            }
            set
            {
                if ((isStaticField.Equals(value) != true))
                {
                    this.isStaticField = value;
                    this.OnPropertyChanged("IsStatic");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsTwoWay
        {
            get
            {
                return this.isTwoWayField;
            }
            set
            {
                if ((isTwoWayField.Equals(value) != true))
                {
                    this.isTwoWayField = value;
                    this.OnPropertyChanged("IsTwoWay");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int BindingOption
        {
            get
            {
                return this.bindingOptionField;
            }
            set
            {
                if ((bindingOptionField.Equals(value) != true))
                {
                    this.bindingOptionField = value;
                    this.OnPropertyChanged("BindingOption");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SendPort));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SendPort object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SendPort object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SendPort object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SendPort obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SendPort);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out SendPort obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static SendPort Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((SendPort)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current SendPort object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SendPort object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SendPort object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SendPort obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SendPort);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SendPort obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SendPort LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class TransportInfo : BindingBaseObject, System.ComponentModel.INotifyPropertyChanged
    {

        private string addressField;

        private ProtocolType transportTypeField;

        private string transportTypeDataField;

        private int retryCountField;

        private int retryIntervalField;

        private bool serviceWindowEnabledField;

        private System.DateTime fromTimeField;

        private System.DateTime toTimeField;

        private bool primaryField;

        private bool orderedDeliveryField;

        private int deliveryNotificationField;

        private SendHandlerRef sendHandlerField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// TransportInfo class constructor
        /// </summary>
        public TransportInfo()
        {
            this.sendHandlerField = new SendHandlerRef();
            this.transportTypeField = new ProtocolType();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string Address
        {
            get
            {
                return this.addressField;
            }
            set
            {
                if ((this.addressField != null))
                {
                    if ((addressField.Equals(value) != true))
                    {
                        this.addressField = value;
                        this.OnPropertyChanged("Address");
                    }
                }
                else
                {
                    this.addressField = value;
                    this.OnPropertyChanged("Address");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public ProtocolType TransportType
        {
            get
            {
                return this.transportTypeField;
            }
            set
            {
                if ((this.transportTypeField != null))
                {
                    if ((transportTypeField.Equals(value) != true))
                    {
                        this.transportTypeField = value;
                        this.OnPropertyChanged("TransportType");
                    }
                }
                else
                {
                    this.transportTypeField = value;
                    this.OnPropertyChanged("TransportType");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string TransportTypeData
        {
            get
            {
                return this.transportTypeDataField;
            }
            set
            {
                if ((this.transportTypeDataField != null))
                {
                    if ((transportTypeDataField.Equals(value) != true))
                    {
                        this.transportTypeDataField = value;
                        this.OnPropertyChanged("TransportTypeData");
                    }
                }
                else
                {
                    this.transportTypeDataField = value;
                    this.OnPropertyChanged("TransportTypeData");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public int RetryCount
        {
            get
            {
                return this.retryCountField;
            }
            set
            {
                if ((retryCountField.Equals(value) != true))
                {
                    this.retryCountField = value;
                    this.OnPropertyChanged("RetryCount");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public int RetryInterval
        {
            get
            {
                return this.retryIntervalField;
            }
            set
            {
                if ((retryIntervalField.Equals(value) != true))
                {
                    this.retryIntervalField = value;
                    this.OnPropertyChanged("RetryInterval");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public bool ServiceWindowEnabled
        {
            get
            {
                return this.serviceWindowEnabledField;
            }
            set
            {
                if ((serviceWindowEnabledField.Equals(value) != true))
                {
                    this.serviceWindowEnabledField = value;
                    this.OnPropertyChanged("ServiceWindowEnabled");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public System.DateTime FromTime
        {
            get
            {
                return this.fromTimeField;
            }
            set
            {
                if ((fromTimeField.Equals(value) != true))
                {
                    this.fromTimeField = value;
                    this.OnPropertyChanged("FromTime");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public System.DateTime ToTime
        {
            get
            {
                return this.toTimeField;
            }
            set
            {
                if ((toTimeField.Equals(value) != true))
                {
                    this.toTimeField = value;
                    this.OnPropertyChanged("ToTime");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public bool Primary
        {
            get
            {
                return this.primaryField;
            }
            set
            {
                if ((primaryField.Equals(value) != true))
                {
                    this.primaryField = value;
                    this.OnPropertyChanged("Primary");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public bool OrderedDelivery
        {
            get
            {
                return this.orderedDeliveryField;
            }
            set
            {
                if ((orderedDeliveryField.Equals(value) != true))
                {
                    this.orderedDeliveryField = value;
                    this.OnPropertyChanged("OrderedDelivery");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public int DeliveryNotification
        {
            get
            {
                return this.deliveryNotificationField;
            }
            set
            {
                if ((deliveryNotificationField.Equals(value) != true))
                {
                    this.deliveryNotificationField = value;
                    this.OnPropertyChanged("DeliveryNotification");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 11)]
        public SendHandlerRef SendHandler
        {
            get
            {
                return this.sendHandlerField;
            }
            set
            {
                if ((this.sendHandlerField != null))
                {
                    if ((sendHandlerField.Equals(value) != true))
                    {
                        this.sendHandlerField = value;
                        this.OnPropertyChanged("SendHandler");
                    }
                }
                else
                {
                    this.sendHandlerField = value;
                    this.OnPropertyChanged("SendHandler");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TransportInfo));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TransportInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an TransportInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TransportInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TransportInfo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransportInfo);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TransportInfo obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TransportInfo Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TransportInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TransportInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TransportInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TransportInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TransportInfo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransportInfo);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TransportInfo obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TransportInfo LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class DistributionList : BindingBaseObject, System.ComponentModel.INotifyPropertyChanged
    {

        private List<SendPortRef> sendPortsField;

        private string filterField;

        private string applicationNameField;

        private string descriptionField;

        private string nameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// DistributionList class constructor
        /// </summary>
        public DistributionList()
        {
            this.sendPortsField = new List<SendPortRef>();
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 0)]
        public List<SendPortRef> SendPorts
        {
            get
            {
                return this.sendPortsField;
            }
            set
            {
                if ((this.sendPortsField != null))
                {
                    if ((sendPortsField.Equals(value) != true))
                    {
                        this.sendPortsField = value;
                        this.OnPropertyChanged("SendPorts");
                    }
                }
                else
                {
                    this.sendPortsField = value;
                    this.OnPropertyChanged("SendPorts");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 1)]
        public string Filter
        {
            get
            {
                return this.filterField;
            }
            set
            {
                if ((this.filterField != null))
                {
                    if ((filterField.Equals(value) != true))
                    {
                        this.filterField = value;
                        this.OnPropertyChanged("Filter");
                    }
                }
                else
                {
                    this.filterField = value;
                    this.OnPropertyChanged("Filter");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 2)]
        public string ApplicationName
        {
            get
            {
                return this.applicationNameField;
            }
            set
            {
                if ((this.applicationNameField != null))
                {
                    if ((applicationNameField.Equals(value) != true))
                    {
                        this.applicationNameField = value;
                        this.OnPropertyChanged("ApplicationName");
                    }
                }
                else
                {
                    this.applicationNameField = value;
                    this.OnPropertyChanged("ApplicationName");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 3)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                if ((this.descriptionField != null))
                {
                    if ((descriptionField.Equals(value) != true))
                    {
                        this.descriptionField = value;
                        this.OnPropertyChanged("Description");
                    }
                }
                else
                {
                    this.descriptionField = value;
                    this.OnPropertyChanged("Description");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DistributionList));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DistributionList object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an DistributionList object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DistributionList object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DistributionList obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DistributionList);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DistributionList obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DistributionList Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DistributionList)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current DistributionList object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DistributionList object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DistributionList object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DistributionList obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DistributionList);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DistributionList obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DistributionList LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ReceivePort : BindingBaseObject, System.ComponentModel.INotifyPropertyChanged
    {

        private string descriptionField;

        private List<ReceiveLocation> receiveLocationsField;

        private PipelineRef transmitPipelineField;

        private string sendPipelineDataField;

        private int authenticationField;

        private int trackingField;

        private List<Transform> transformsField;

        private List<Transform> outboundTransformsField;

        private bool routeFailedMessageField;

        private string applicationNameField;

        private string nameField;

        private bool isTwoWayField;

        private int bindingOptionField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ReceivePort class constructor
        /// </summary>
        public ReceivePort()
        {
            this.outboundTransformsField = new List<Transform>();
            this.transformsField = new List<Transform>();
            this.transmitPipelineField = new PipelineRef();
            this.receiveLocationsField = new List<ReceiveLocation>();
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 0)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                if ((this.descriptionField != null))
                {
                    if ((descriptionField.Equals(value) != true))
                    {
                        this.descriptionField = value;
                        this.OnPropertyChanged("Description");
                    }
                }
                else
                {
                    this.descriptionField = value;
                    this.OnPropertyChanged("Description");
                }
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 1)]
        public List<ReceiveLocation> ReceiveLocations
        {
            get
            {
                return this.receiveLocationsField;
            }
            set
            {
                if ((this.receiveLocationsField != null))
                {
                    if ((receiveLocationsField.Equals(value) != true))
                    {
                        this.receiveLocationsField = value;
                        this.OnPropertyChanged("ReceiveLocations");
                    }
                }
                else
                {
                    this.receiveLocationsField = value;
                    this.OnPropertyChanged("ReceiveLocations");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public PipelineRef TransmitPipeline
        {
            get
            {
                return this.transmitPipelineField;
            }
            set
            {
                if ((this.transmitPipelineField != null))
                {
                    if ((transmitPipelineField.Equals(value) != true))
                    {
                        this.transmitPipelineField = value;
                        this.OnPropertyChanged("TransmitPipeline");
                    }
                }
                else
                {
                    this.transmitPipelineField = value;
                    this.OnPropertyChanged("TransmitPipeline");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 3)]
        public string SendPipelineData
        {
            get
            {
                return this.sendPipelineDataField;
            }
            set
            {
                if ((this.sendPipelineDataField != null))
                {
                    if ((sendPipelineDataField.Equals(value) != true))
                    {
                        this.sendPipelineDataField = value;
                        this.OnPropertyChanged("SendPipelineData");
                    }
                }
                else
                {
                    this.sendPipelineDataField = value;
                    this.OnPropertyChanged("SendPipelineData");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public int Authentication
        {
            get
            {
                return this.authenticationField;
            }
            set
            {
                if ((authenticationField.Equals(value) != true))
                {
                    this.authenticationField = value;
                    this.OnPropertyChanged("Authentication");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public int Tracking
        {
            get
            {
                return this.trackingField;
            }
            set
            {
                if ((trackingField.Equals(value) != true))
                {
                    this.trackingField = value;
                    this.OnPropertyChanged("Tracking");
                }
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 6)]
        public List<Transform> Transforms
        {
            get
            {
                return this.transformsField;
            }
            set
            {
                if ((this.transformsField != null))
                {
                    if ((transformsField.Equals(value) != true))
                    {
                        this.transformsField = value;
                        this.OnPropertyChanged("Transforms");
                    }
                }
                else
                {
                    this.transformsField = value;
                    this.OnPropertyChanged("Transforms");
                }
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 7)]
        public List<Transform> OutboundTransforms
        {
            get
            {
                return this.outboundTransformsField;
            }
            set
            {
                if ((this.outboundTransformsField != null))
                {
                    if ((outboundTransformsField.Equals(value) != true))
                    {
                        this.outboundTransformsField = value;
                        this.OnPropertyChanged("OutboundTransforms");
                    }
                }
                else
                {
                    this.outboundTransformsField = value;
                    this.OnPropertyChanged("OutboundTransforms");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public bool RouteFailedMessage
        {
            get
            {
                return this.routeFailedMessageField;
            }
            set
            {
                if ((routeFailedMessageField.Equals(value) != true))
                {
                    this.routeFailedMessageField = value;
                    this.OnPropertyChanged("RouteFailedMessage");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 9)]
        public string ApplicationName
        {
            get
            {
                return this.applicationNameField;
            }
            set
            {
                if ((this.applicationNameField != null))
                {
                    if ((applicationNameField.Equals(value) != true))
                    {
                        this.applicationNameField = value;
                        this.OnPropertyChanged("ApplicationName");
                    }
                }
                else
                {
                    this.applicationNameField = value;
                    this.OnPropertyChanged("ApplicationName");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsTwoWay
        {
            get
            {
                return this.isTwoWayField;
            }
            set
            {
                if ((isTwoWayField.Equals(value) != true))
                {
                    this.isTwoWayField = value;
                    this.OnPropertyChanged("IsTwoWay");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int BindingOption
        {
            get
            {
                return this.bindingOptionField;
            }
            set
            {
                if ((bindingOptionField.Equals(value) != true))
                {
                    this.bindingOptionField = value;
                    this.OnPropertyChanged("BindingOption");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ReceivePort));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ReceivePort object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ReceivePort object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ReceivePort object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ReceivePort obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReceivePort);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ReceivePort obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ReceivePort Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ReceivePort)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ReceivePort object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ReceivePort object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ReceivePort object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ReceivePort obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReceivePort);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ReceivePort obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ReceivePort LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ReceiveLocation : BindingBaseObject, System.ComponentModel.INotifyPropertyChanged
    {

        private string descriptionField;

        private string addressField;

        private string publicAddressField;

        private bool primaryField;

        private bool receiveLocationServiceWindowEnabledField;

        private System.DateTime receiveLocationFromTimeField;

        private System.DateTime receiveLocationToTimeField;

        private bool receiveLocationStartDateEnabledField;

        private System.DateTime receiveLocationStartDateField;

        private bool receiveLocationEndDateEnabledField;

        private System.DateTime receiveLocationEndDateField;

        private ProtocolType receiveLocationTransportTypeField;

        private string receiveLocationTransportTypeDataField;

        private PipelineRef receivePipelineField;

        private string receivePipelineDataField;

        private PipelineRef sendPipelineField;

        private string sendPipelineDataField;

        private CertificateInfo encryptionCertField;

        private bool enableField;

        private ReceiveHandlerRef receiveHandlerField;

        private string nameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ReceiveLocation class constructor
        /// </summary>
        public ReceiveLocation()
        {
            this.receiveHandlerField = new ReceiveHandlerRef();
            this.encryptionCertField = new CertificateInfo();
            this.sendPipelineField = new PipelineRef();
            this.receivePipelineField = new PipelineRef();
            this.receiveLocationTransportTypeField = new ProtocolType();
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 0)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                if ((this.descriptionField != null))
                {
                    if ((descriptionField.Equals(value) != true))
                    {
                        this.descriptionField = value;
                        this.OnPropertyChanged("Description");
                    }
                }
                else
                {
                    this.descriptionField = value;
                    this.OnPropertyChanged("Description");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string Address
        {
            get
            {
                return this.addressField;
            }
            set
            {
                if ((this.addressField != null))
                {
                    if ((addressField.Equals(value) != true))
                    {
                        this.addressField = value;
                        this.OnPropertyChanged("Address");
                    }
                }
                else
                {
                    this.addressField = value;
                    this.OnPropertyChanged("Address");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 2)]
        public string PublicAddress
        {
            get
            {
                return this.publicAddressField;
            }
            set
            {
                if ((this.publicAddressField != null))
                {
                    if ((publicAddressField.Equals(value) != true))
                    {
                        this.publicAddressField = value;
                        this.OnPropertyChanged("PublicAddress");
                    }
                }
                else
                {
                    this.publicAddressField = value;
                    this.OnPropertyChanged("PublicAddress");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public bool Primary
        {
            get
            {
                return this.primaryField;
            }
            set
            {
                if ((primaryField.Equals(value) != true))
                {
                    this.primaryField = value;
                    this.OnPropertyChanged("Primary");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public bool ReceiveLocationServiceWindowEnabled
        {
            get
            {
                return this.receiveLocationServiceWindowEnabledField;
            }
            set
            {
                if ((receiveLocationServiceWindowEnabledField.Equals(value) != true))
                {
                    this.receiveLocationServiceWindowEnabledField = value;
                    this.OnPropertyChanged("ReceiveLocationServiceWindowEnabled");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public System.DateTime ReceiveLocationFromTime
        {
            get
            {
                return this.receiveLocationFromTimeField;
            }
            set
            {
                if ((receiveLocationFromTimeField.Equals(value) != true))
                {
                    this.receiveLocationFromTimeField = value;
                    this.OnPropertyChanged("ReceiveLocationFromTime");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public System.DateTime ReceiveLocationToTime
        {
            get
            {
                return this.receiveLocationToTimeField;
            }
            set
            {
                if ((receiveLocationToTimeField.Equals(value) != true))
                {
                    this.receiveLocationToTimeField = value;
                    this.OnPropertyChanged("ReceiveLocationToTime");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public bool ReceiveLocationStartDateEnabled
        {
            get
            {
                return this.receiveLocationStartDateEnabledField;
            }
            set
            {
                if ((receiveLocationStartDateEnabledField.Equals(value) != true))
                {
                    this.receiveLocationStartDateEnabledField = value;
                    this.OnPropertyChanged("ReceiveLocationStartDateEnabled");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public System.DateTime ReceiveLocationStartDate
        {
            get
            {
                return this.receiveLocationStartDateField;
            }
            set
            {
                if ((receiveLocationStartDateField.Equals(value) != true))
                {
                    this.receiveLocationStartDateField = value;
                    this.OnPropertyChanged("ReceiveLocationStartDate");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public bool ReceiveLocationEndDateEnabled
        {
            get
            {
                return this.receiveLocationEndDateEnabledField;
            }
            set
            {
                if ((receiveLocationEndDateEnabledField.Equals(value) != true))
                {
                    this.receiveLocationEndDateEnabledField = value;
                    this.OnPropertyChanged("ReceiveLocationEndDateEnabled");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public System.DateTime ReceiveLocationEndDate
        {
            get
            {
                return this.receiveLocationEndDateField;
            }
            set
            {
                if ((receiveLocationEndDateField.Equals(value) != true))
                {
                    this.receiveLocationEndDateField = value;
                    this.OnPropertyChanged("ReceiveLocationEndDate");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 11)]
        public ProtocolType ReceiveLocationTransportType
        {
            get
            {
                return this.receiveLocationTransportTypeField;
            }
            set
            {
                if ((this.receiveLocationTransportTypeField != null))
                {
                    if ((receiveLocationTransportTypeField.Equals(value) != true))
                    {
                        this.receiveLocationTransportTypeField = value;
                        this.OnPropertyChanged("ReceiveLocationTransportType");
                    }
                }
                else
                {
                    this.receiveLocationTransportTypeField = value;
                    this.OnPropertyChanged("ReceiveLocationTransportType");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        public string ReceiveLocationTransportTypeData
        {
            get
            {
                return this.receiveLocationTransportTypeDataField;
            }
            set
            {
                if ((this.receiveLocationTransportTypeDataField != null))
                {
                    if ((receiveLocationTransportTypeDataField.Equals(value) != true))
                    {
                        this.receiveLocationTransportTypeDataField = value;
                        this.OnPropertyChanged("ReceiveLocationTransportTypeData");
                    }
                }
                else
                {
                    this.receiveLocationTransportTypeDataField = value;
                    this.OnPropertyChanged("ReceiveLocationTransportTypeData");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 13)]
        public PipelineRef ReceivePipeline
        {
            get
            {
                return this.receivePipelineField;
            }
            set
            {
                if ((this.receivePipelineField != null))
                {
                    if ((receivePipelineField.Equals(value) != true))
                    {
                        this.receivePipelineField = value;
                        this.OnPropertyChanged("ReceivePipeline");
                    }
                }
                else
                {
                    this.receivePipelineField = value;
                    this.OnPropertyChanged("ReceivePipeline");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 14)]
        public string ReceivePipelineData
        {
            get
            {
                return this.receivePipelineDataField;
            }
            set
            {
                if ((this.receivePipelineDataField != null))
                {
                    if ((receivePipelineDataField.Equals(value) != true))
                    {
                        this.receivePipelineDataField = value;
                        this.OnPropertyChanged("ReceivePipelineData");
                    }
                }
                else
                {
                    this.receivePipelineDataField = value;
                    this.OnPropertyChanged("ReceivePipelineData");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 15)]
        public PipelineRef SendPipeline
        {
            get
            {
                return this.sendPipelineField;
            }
            set
            {
                if ((this.sendPipelineField != null))
                {
                    if ((sendPipelineField.Equals(value) != true))
                    {
                        this.sendPipelineField = value;
                        this.OnPropertyChanged("SendPipeline");
                    }
                }
                else
                {
                    this.sendPipelineField = value;
                    this.OnPropertyChanged("SendPipeline");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 16)]
        public string SendPipelineData
        {
            get
            {
                return this.sendPipelineDataField;
            }
            set
            {
                if ((this.sendPipelineDataField != null))
                {
                    if ((sendPipelineDataField.Equals(value) != true))
                    {
                        this.sendPipelineDataField = value;
                        this.OnPropertyChanged("SendPipelineData");
                    }
                }
                else
                {
                    this.sendPipelineDataField = value;
                    this.OnPropertyChanged("SendPipelineData");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 17)]
        public CertificateInfo EncryptionCert
        {
            get
            {
                return this.encryptionCertField;
            }
            set
            {
                if ((this.encryptionCertField != null))
                {
                    if ((encryptionCertField.Equals(value) != true))
                    {
                        this.encryptionCertField = value;
                        this.OnPropertyChanged("EncryptionCert");
                    }
                }
                else
                {
                    this.encryptionCertField = value;
                    this.OnPropertyChanged("EncryptionCert");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 18)]
        public bool Enable
        {
            get
            {
                return this.enableField;
            }
            set
            {
                if ((enableField.Equals(value) != true))
                {
                    this.enableField = value;
                    this.OnPropertyChanged("Enable");
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 19)]
        public ReceiveHandlerRef ReceiveHandler
        {
            get
            {
                return this.receiveHandlerField;
            }
            set
            {
                if ((this.receiveHandlerField != null))
                {
                    if ((receiveHandlerField.Equals(value) != true))
                    {
                        this.receiveHandlerField = value;
                        this.OnPropertyChanged("ReceiveHandler");
                    }
                }
                else
                {
                    this.receiveHandlerField = value;
                    this.OnPropertyChanged("ReceiveHandler");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ReceiveLocation));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ReceiveLocation object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ReceiveLocation object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ReceiveLocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ReceiveLocation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReceiveLocation);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ReceiveLocation obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ReceiveLocation Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ReceiveLocation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ReceiveLocation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ReceiveLocation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ReceiveLocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ReceiveLocation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReceiveLocation);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ReceiveLocation obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ReceiveLocation LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class EnlistedParty : BindingBaseObject, System.ComponentModel.INotifyPropertyChanged
    {

        private List<EnlistedPartyMapping> mappingsField;

        private string nameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// EnlistedParty class constructor
        /// </summary>
        public EnlistedParty()
        {
            this.mappingsField = new List<EnlistedPartyMapping>();
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Mapping")]
        public List<EnlistedPartyMapping> Mappings
        {
            get
            {
                return this.mappingsField;
            }
            set
            {
                if ((this.mappingsField != null))
                {
                    if ((mappingsField.Equals(value) != true))
                    {
                        this.mappingsField = value;
                        this.OnPropertyChanged("Mappings");
                    }
                }
                else
                {
                    this.mappingsField = value;
                    this.OnPropertyChanged("Mappings");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(EnlistedParty));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EnlistedParty object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EnlistedParty object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output EnlistedParty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out EnlistedParty obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EnlistedParty);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out EnlistedParty obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static EnlistedParty Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((EnlistedParty)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current EnlistedParty object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EnlistedParty object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EnlistedParty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EnlistedParty obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EnlistedParty);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EnlistedParty obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EnlistedParty LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class RoleRef : BindingBaseObject, System.ComponentModel.INotifyPropertyChanged
    {

        private List<EnlistedParty> enlistedPartiesField;

        private string nameField;

        private string roleLinkTypeNameField;

        private RoleRefType roleTypeField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// RoleRef class constructor
        /// </summary>
        public RoleRef()
        {
            this.enlistedPartiesField = new List<EnlistedParty>();
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 0)]
        public List<EnlistedParty> EnlistedParties
        {
            get
            {
                return this.enlistedPartiesField;
            }
            set
            {
                if ((this.enlistedPartiesField != null))
                {
                    if ((enlistedPartiesField.Equals(value) != true))
                    {
                        this.enlistedPartiesField = value;
                        this.OnPropertyChanged("EnlistedParties");
                    }
                }
                else
                {
                    this.enlistedPartiesField = value;
                    this.OnPropertyChanged("EnlistedParties");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                if ((this.nameField != null))
                {
                    if ((nameField.Equals(value) != true))
                    {
                        this.nameField = value;
                        this.OnPropertyChanged("Name");
                    }
                }
                else
                {
                    this.nameField = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string RoleLinkTypeName
        {
            get
            {
                return this.roleLinkTypeNameField;
            }
            set
            {
                if ((this.roleLinkTypeNameField != null))
                {
                    if ((roleLinkTypeNameField.Equals(value) != true))
                    {
                        this.roleLinkTypeNameField = value;
                        this.OnPropertyChanged("RoleLinkTypeName");
                    }
                }
                else
                {
                    this.roleLinkTypeNameField = value;
                    this.OnPropertyChanged("RoleLinkTypeName");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public RoleRefType RoleType
        {
            get
            {
                return this.roleTypeField;
            }
            set
            {
                if ((roleTypeField.Equals(value) != true))
                {
                    this.roleTypeField = value;
                    this.OnPropertyChanged("RoleType");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(RoleRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RoleRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an RoleRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output RoleRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out RoleRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RoleRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out RoleRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static RoleRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((RoleRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current RoleRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an RoleRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RoleRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out RoleRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RoleRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out RoleRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static RoleRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    public enum RoleRefType
    {

        /// <remarks/>
        Unknown,

        /// <remarks/>
        Implements,

        /// <remarks/>
        Uses,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    public enum ServiceRefState
    {

        /// <remarks/>
        Default,

        /// <remarks/>
        Unenlisted,

        /// <remarks/>
        Enlisted,

        /// <remarks/>
        Started,
    }

    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    public enum OrchestrationTrackingTypes
    {

        /// <remarks/>
        None = 1,

        /// <remarks/>
        ServiceStartEnd = 2,

        /// <remarks/>
        MessageSendReceive = 4,

        /// <remarks/>
        InboundMessageBody = 8,

        /// <remarks/>
        OutboundMessageBody = 16,

        /// <remarks/>
        OrchestrationEvents = 32,

        /// <remarks/>
        TrackPropertiesForIncomingMessages = 64,

        /// <remarks/>
        TrackPropertiesForOutgoingMessages = 128,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    public enum BindingState
    {

        /// <remarks/>
        Unknown,

        /// <remarks/>
        NoBindings,

        /// <remarks/>
        Unbound,

        /// <remarks/>
        PartiallyBound,

        /// <remarks/>
        FullyBound,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ArrayOfModuleRef : System.ComponentModel.INotifyPropertyChanged
    {

        private List<ModuleRef> moduleRefField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ArrayOfModuleRef class constructor
        /// </summary>
        public ArrayOfModuleRef()
        {
            this.moduleRefField = new List<ModuleRef>();
        }

        [System.Xml.Serialization.XmlElementAttribute("ModuleRef", IsNullable = true, Order = 0)]
        public List<ModuleRef> ModuleRef
        {
            get
            {
                return this.moduleRefField;
            }
            set
            {
                if ((this.moduleRefField != null))
                {
                    if ((moduleRefField.Equals(value) != true))
                    {
                        this.moduleRefField = value;
                        this.OnPropertyChanged("ModuleRef");
                    }
                }
                else
                {
                    this.moduleRefField = value;
                    this.OnPropertyChanged("ModuleRef");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ArrayOfModuleRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArrayOfModuleRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ArrayOfModuleRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArrayOfModuleRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ArrayOfModuleRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfModuleRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ArrayOfModuleRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ArrayOfModuleRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ArrayOfModuleRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ArrayOfModuleRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ArrayOfModuleRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArrayOfModuleRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArrayOfModuleRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfModuleRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ArrayOfModuleRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ArrayOfModuleRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ArrayOfReceiveLocation : System.ComponentModel.INotifyPropertyChanged
    {

        private List<ReceiveLocation> receiveLocationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ArrayOfReceiveLocation class constructor
        /// </summary>
        public ArrayOfReceiveLocation()
        {
            this.receiveLocationField = new List<ReceiveLocation>();
        }

        [System.Xml.Serialization.XmlElementAttribute("ReceiveLocation", IsNullable = true, Order = 0)]
        public List<ReceiveLocation> ReceiveLocation
        {
            get
            {
                return this.receiveLocationField;
            }
            set
            {
                if ((this.receiveLocationField != null))
                {
                    if ((receiveLocationField.Equals(value) != true))
                    {
                        this.receiveLocationField = value;
                        this.OnPropertyChanged("ReceiveLocation");
                    }
                }
                else
                {
                    this.receiveLocationField = value;
                    this.OnPropertyChanged("ReceiveLocation");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ArrayOfReceiveLocation));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArrayOfReceiveLocation object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ArrayOfReceiveLocation object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArrayOfReceiveLocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ArrayOfReceiveLocation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfReceiveLocation);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ArrayOfReceiveLocation obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ArrayOfReceiveLocation Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ArrayOfReceiveLocation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ArrayOfReceiveLocation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ArrayOfReceiveLocation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArrayOfReceiveLocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArrayOfReceiveLocation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfReceiveLocation);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ArrayOfReceiveLocation obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ArrayOfReceiveLocation LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ArrayOfTransform : System.ComponentModel.INotifyPropertyChanged
    {

        private List<Transform> transformField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ArrayOfTransform class constructor
        /// </summary>
        public ArrayOfTransform()
        {
            this.transformField = new List<Transform>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Transform", IsNullable = true, Order = 0)]
        public List<Transform> Transform
        {
            get
            {
                return this.transformField;
            }
            set
            {
                if ((this.transformField != null))
                {
                    if ((transformField.Equals(value) != true))
                    {
                        this.transformField = value;
                        this.OnPropertyChanged("Transform");
                    }
                }
                else
                {
                    this.transformField = value;
                    this.OnPropertyChanged("Transform");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ArrayOfTransform));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArrayOfTransform object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ArrayOfTransform object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArrayOfTransform object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ArrayOfTransform obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfTransform);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ArrayOfTransform obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ArrayOfTransform Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ArrayOfTransform)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ArrayOfTransform object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ArrayOfTransform object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArrayOfTransform object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArrayOfTransform obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfTransform);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ArrayOfTransform obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ArrayOfTransform LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ArrayOfSendPortRef : System.ComponentModel.INotifyPropertyChanged
    {

        private List<SendPortRef> sendPortRefField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ArrayOfSendPortRef class constructor
        /// </summary>
        public ArrayOfSendPortRef()
        {
            this.sendPortRefField = new List<SendPortRef>();
        }

        [System.Xml.Serialization.XmlElementAttribute("SendPortRef", IsNullable = true, Order = 0)]
        public List<SendPortRef> SendPortRef
        {
            get
            {
                return this.sendPortRefField;
            }
            set
            {
                if ((this.sendPortRefField != null))
                {
                    if ((sendPortRefField.Equals(value) != true))
                    {
                        this.sendPortRefField = value;
                        this.OnPropertyChanged("SendPortRef");
                    }
                }
                else
                {
                    this.sendPortRefField = value;
                    this.OnPropertyChanged("SendPortRef");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ArrayOfSendPortRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArrayOfSendPortRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ArrayOfSendPortRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArrayOfSendPortRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ArrayOfSendPortRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfSendPortRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ArrayOfSendPortRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ArrayOfSendPortRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ArrayOfSendPortRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ArrayOfSendPortRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ArrayOfSendPortRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArrayOfSendPortRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArrayOfSendPortRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfSendPortRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ArrayOfSendPortRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ArrayOfSendPortRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ArrayOfEnlistedPartyMapping : System.ComponentModel.INotifyPropertyChanged
    {

        private List<EnlistedPartyMapping> mappingField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ArrayOfEnlistedPartyMapping class constructor
        /// </summary>
        public ArrayOfEnlistedPartyMapping()
        {
            this.mappingField = new List<EnlistedPartyMapping>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Mapping", IsNullable = true, Order = 0)]
        public List<EnlistedPartyMapping> Mapping
        {
            get
            {
                return this.mappingField;
            }
            set
            {
                if ((this.mappingField != null))
                {
                    if ((mappingField.Equals(value) != true))
                    {
                        this.mappingField = value;
                        this.OnPropertyChanged("Mapping");
                    }
                }
                else
                {
                    this.mappingField = value;
                    this.OnPropertyChanged("Mapping");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ArrayOfEnlistedPartyMapping));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArrayOfEnlistedPartyMapping object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ArrayOfEnlistedPartyMapping object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArrayOfEnlistedPartyMapping object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ArrayOfEnlistedPartyMapping obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfEnlistedPartyMapping);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ArrayOfEnlistedPartyMapping obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ArrayOfEnlistedPartyMapping Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ArrayOfEnlistedPartyMapping)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ArrayOfEnlistedPartyMapping object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ArrayOfEnlistedPartyMapping object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArrayOfEnlistedPartyMapping object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArrayOfEnlistedPartyMapping obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfEnlistedPartyMapping);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ArrayOfEnlistedPartyMapping obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ArrayOfEnlistedPartyMapping LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ArrayOfEnlistedParty : System.ComponentModel.INotifyPropertyChanged
    {

        private List<EnlistedParty> enlistedPartyField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ArrayOfEnlistedParty class constructor
        /// </summary>
        public ArrayOfEnlistedParty()
        {
            this.enlistedPartyField = new List<EnlistedParty>();
        }

        [System.Xml.Serialization.XmlElementAttribute("EnlistedParty", IsNullable = true, Order = 0)]
        public List<EnlistedParty> EnlistedParty
        {
            get
            {
                return this.enlistedPartyField;
            }
            set
            {
                if ((this.enlistedPartyField != null))
                {
                    if ((enlistedPartyField.Equals(value) != true))
                    {
                        this.enlistedPartyField = value;
                        this.OnPropertyChanged("EnlistedParty");
                    }
                }
                else
                {
                    this.enlistedPartyField = value;
                    this.OnPropertyChanged("EnlistedParty");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ArrayOfEnlistedParty));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArrayOfEnlistedParty object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ArrayOfEnlistedParty object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArrayOfEnlistedParty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ArrayOfEnlistedParty obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfEnlistedParty);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ArrayOfEnlistedParty obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ArrayOfEnlistedParty Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ArrayOfEnlistedParty)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ArrayOfEnlistedParty object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ArrayOfEnlistedParty object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArrayOfEnlistedParty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArrayOfEnlistedParty obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfEnlistedParty);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ArrayOfEnlistedParty obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ArrayOfEnlistedParty LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ArrayOfServicePortRef : System.ComponentModel.INotifyPropertyChanged
    {

        private List<ServicePortRef> portField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ArrayOfServicePortRef class constructor
        /// </summary>
        public ArrayOfServicePortRef()
        {
            this.portField = new List<ServicePortRef>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Port", IsNullable = true, Order = 0)]
        public List<ServicePortRef> Port
        {
            get
            {
                return this.portField;
            }
            set
            {
                if ((this.portField != null))
                {
                    if ((portField.Equals(value) != true))
                    {
                        this.portField = value;
                        this.OnPropertyChanged("Port");
                    }
                }
                else
                {
                    this.portField = value;
                    this.OnPropertyChanged("Port");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ArrayOfServicePortRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArrayOfServicePortRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ArrayOfServicePortRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArrayOfServicePortRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ArrayOfServicePortRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfServicePortRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ArrayOfServicePortRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ArrayOfServicePortRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ArrayOfServicePortRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ArrayOfServicePortRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ArrayOfServicePortRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArrayOfServicePortRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArrayOfServicePortRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfServicePortRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ArrayOfServicePortRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ArrayOfServicePortRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ArrayOfRoleRef : System.ComponentModel.INotifyPropertyChanged
    {

        private List<RoleRef> roleField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ArrayOfRoleRef class constructor
        /// </summary>
        public ArrayOfRoleRef()
        {
            this.roleField = new List<RoleRef>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Role", IsNullable = true, Order = 0)]
        public List<RoleRef> Role
        {
            get
            {
                return this.roleField;
            }
            set
            {
                if ((this.roleField != null))
                {
                    if ((roleField.Equals(value) != true))
                    {
                        this.roleField = value;
                        this.OnPropertyChanged("Role");
                    }
                }
                else
                {
                    this.roleField = value;
                    this.OnPropertyChanged("Role");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ArrayOfRoleRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArrayOfRoleRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ArrayOfRoleRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArrayOfRoleRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ArrayOfRoleRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfRoleRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ArrayOfRoleRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ArrayOfRoleRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ArrayOfRoleRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ArrayOfRoleRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ArrayOfRoleRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArrayOfRoleRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArrayOfRoleRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfRoleRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ArrayOfRoleRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ArrayOfRoleRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ArrayOfServiceRef : System.ComponentModel.INotifyPropertyChanged
    {

        private List<ServiceRef> serviceField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ArrayOfServiceRef class constructor
        /// </summary>
        public ArrayOfServiceRef()
        {
            this.serviceField = new List<ServiceRef>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Service", IsNullable = true, Order = 0)]
        public List<ServiceRef> Service
        {
            get
            {
                return this.serviceField;
            }
            set
            {
                if ((this.serviceField != null))
                {
                    if ((serviceField.Equals(value) != true))
                    {
                        this.serviceField = value;
                        this.OnPropertyChanged("Service");
                    }
                }
                else
                {
                    this.serviceField = value;
                    this.OnPropertyChanged("Service");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ArrayOfServiceRef));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArrayOfServiceRef object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ArrayOfServiceRef object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArrayOfServiceRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ArrayOfServiceRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfServiceRef);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ArrayOfServiceRef obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ArrayOfServiceRef Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ArrayOfServiceRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ArrayOfServiceRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ArrayOfServiceRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArrayOfServiceRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArrayOfServiceRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfServiceRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ArrayOfServiceRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ArrayOfServiceRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ArrayOfSchema : System.ComponentModel.INotifyPropertyChanged
    {

        private List<Schema> schemaField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ArrayOfSchema class constructor
        /// </summary>
        public ArrayOfSchema()
        {
            this.schemaField = new List<Schema>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Schema", IsNullable = true, Order = 0)]
        public List<Schema> Schema
        {
            get
            {
                return this.schemaField;
            }
            set
            {
                if ((this.schemaField != null))
                {
                    if ((schemaField.Equals(value) != true))
                    {
                        this.schemaField = value;
                        this.OnPropertyChanged("Schema");
                    }
                }
                else
                {
                    this.schemaField = value;
                    this.OnPropertyChanged("Schema");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ArrayOfSchema));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArrayOfSchema object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ArrayOfSchema object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArrayOfSchema object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ArrayOfSchema obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfSchema);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ArrayOfSchema obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ArrayOfSchema Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ArrayOfSchema)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ArrayOfSchema object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ArrayOfSchema object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArrayOfSchema object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArrayOfSchema obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfSchema);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ArrayOfSchema obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ArrayOfSchema LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ArrayOfString : System.ComponentModel.INotifyPropertyChanged
    {

        private List<string> stringField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ArrayOfString class constructor
        /// </summary>
        public ArrayOfString()
        {
            this.stringField = new List<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute("string", IsNullable = true, Order = 0)]
        public List<string> @string
        {
            get
            {
                return this.stringField;
            }
            set
            {
                if ((this.stringField != null))
                {
                    if ((stringField.Equals(value) != true))
                    {
                        this.stringField = value;
                        this.OnPropertyChanged("string");
                    }
                }
                else
                {
                    this.stringField = value;
                    this.OnPropertyChanged("string");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ArrayOfString));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArrayOfString object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ArrayOfString object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArrayOfString object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ArrayOfString obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfString);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ArrayOfString obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ArrayOfString Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ArrayOfString)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ArrayOfString object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ArrayOfString object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArrayOfString object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArrayOfString obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfString);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ArrayOfString obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ArrayOfString LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ArrayOfSendPort : System.ComponentModel.INotifyPropertyChanged
    {

        private List<SendPort> sendPortField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ArrayOfSendPort class constructor
        /// </summary>
        public ArrayOfSendPort()
        {
            this.sendPortField = new List<SendPort>();
        }

        [System.Xml.Serialization.XmlElementAttribute("SendPort", IsNullable = true, Order = 0)]
        public List<SendPort> SendPort
        {
            get
            {
                return this.sendPortField;
            }
            set
            {
                if ((this.sendPortField != null))
                {
                    if ((sendPortField.Equals(value) != true))
                    {
                        this.sendPortField = value;
                        this.OnPropertyChanged("SendPort");
                    }
                }
                else
                {
                    this.sendPortField = value;
                    this.OnPropertyChanged("SendPort");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ArrayOfSendPort));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArrayOfSendPort object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ArrayOfSendPort object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArrayOfSendPort object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ArrayOfSendPort obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfSendPort);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ArrayOfSendPort obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ArrayOfSendPort Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ArrayOfSendPort)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ArrayOfSendPort object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ArrayOfSendPort object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArrayOfSendPort object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArrayOfSendPort obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfSendPort);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ArrayOfSendPort obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ArrayOfSendPort LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ArrayOfDistributionList : System.ComponentModel.INotifyPropertyChanged
    {

        private List<DistributionList> distributionListField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ArrayOfDistributionList class constructor
        /// </summary>
        public ArrayOfDistributionList()
        {
            this.distributionListField = new List<DistributionList>();
        }

        [System.Xml.Serialization.XmlElementAttribute("DistributionList", IsNullable = true, Order = 0)]
        public List<DistributionList> DistributionList
        {
            get
            {
                return this.distributionListField;
            }
            set
            {
                if ((this.distributionListField != null))
                {
                    if ((distributionListField.Equals(value) != true))
                    {
                        this.distributionListField = value;
                        this.OnPropertyChanged("DistributionList");
                    }
                }
                else
                {
                    this.distributionListField = value;
                    this.OnPropertyChanged("DistributionList");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ArrayOfDistributionList));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArrayOfDistributionList object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ArrayOfDistributionList object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArrayOfDistributionList object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ArrayOfDistributionList obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfDistributionList);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ArrayOfDistributionList obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ArrayOfDistributionList Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ArrayOfDistributionList)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ArrayOfDistributionList object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ArrayOfDistributionList object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArrayOfDistributionList object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArrayOfDistributionList obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfDistributionList);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ArrayOfDistributionList obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ArrayOfDistributionList LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ArrayOfReceivePort : System.ComponentModel.INotifyPropertyChanged
    {

        private List<ReceivePort> receivePortField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ArrayOfReceivePort class constructor
        /// </summary>
        public ArrayOfReceivePort()
        {
            this.receivePortField = new List<ReceivePort>();
        }

        [System.Xml.Serialization.XmlElementAttribute("ReceivePort", IsNullable = true, Order = 0)]
        public List<ReceivePort> ReceivePort
        {
            get
            {
                return this.receivePortField;
            }
            set
            {
                if ((this.receivePortField != null))
                {
                    if ((receivePortField.Equals(value) != true))
                    {
                        this.receivePortField = value;
                        this.OnPropertyChanged("ReceivePort");
                    }
                }
                else
                {
                    this.receivePortField = value;
                    this.OnPropertyChanged("ReceivePort");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ArrayOfReceivePort));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ArrayOfReceivePort object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ArrayOfReceivePort object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ArrayOfReceivePort object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ArrayOfReceivePort obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfReceivePort);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ArrayOfReceivePort obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ArrayOfReceivePort Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ArrayOfReceivePort)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ArrayOfReceivePort object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ArrayOfReceivePort object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ArrayOfReceivePort object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ArrayOfReceivePort obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ArrayOfReceivePort);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ArrayOfReceivePort obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ArrayOfReceivePort LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
